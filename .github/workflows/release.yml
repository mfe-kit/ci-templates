name: Build & Release

on:
  workflow_call:
    inputs:
      repo_name:
        description: "Name of the repository/package (used in artifact/zip name)"
        required: true
        type: string
    secrets:
      RELEASE_TOKEN:
        description: "GitHub token with permissions to push tags and create releases"
        required: true

jobs:
  version-check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      current_version: ${{ steps.package_version.outputs.current_version }}
      latest_version: ${{ steps.latest_tag.outputs.latest_tag_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current package.json version: $VERSION"

      - name: Get latest tag version
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "latest_tag_version=0.0.0" >> $GITHUB_OUTPUT
            echo "No previous tags found, using 0.0.0"
          else
            LATEST_VERSION=${LATEST_TAG#v}
            echo "latest_tag_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "Latest tag version: $LATEST_VERSION"
          fi

      - name: Compare versions
        id: version_check
        run: |
          CURRENT="${{ steps.package_version.outputs.current_version }}"
          LATEST="${{ steps.latest_tag.outputs.latest_tag_version }}"

          SHOULD_RELEASE=$(node -e "
            const current = '$CURRENT'.split('.').map(Number);
            const latest = '$LATEST'.split('.').map(Number);

            for (let i = 0; i < 3; i++) {
              if (current[i] > (latest[i] || 0)) {
                console.log('true');
                process.exit(0);
              }
              if (current[i] < (latest[i] || 0)) {
                console.log('false');
                process.exit(0);
              }
            }
            console.log('false');
          ")

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT, Latest: $LATEST, Should release: $SHOULD_RELEASE"

  build:
    name: Build Library
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_release == 'true'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version-check, build]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Configure git for tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit built dist folder
        run: |
          git add -f dist
          git commit -m "release: add built dist for v${{ needs.version-check.outputs.current_version }}" || echo "No changes to commit"
          git push origin HEAD:main

      - name: Create and push tag
        run: |
          VERSION="${{ needs.version-check.outputs.current_version }}"
          git tag "v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag: v$VERSION"

      - name: Package library
        run: |
          mkdir release
          cp -r dist release/
          cp package.json README.md release/
          cd release
          zip -r ../${{ inputs.repo_name }}-v${{ needs.version-check.outputs.current_version }}.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-check.outputs.current_version }}
          name: v${{ needs.version-check.outputs.current_version }}
          body: "Automated release of v${{ needs.version-check.outputs.current_version }}"
          files: |
            ${{ inputs.repo_name }}-v${{ needs.version-check.outputs.current_version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
